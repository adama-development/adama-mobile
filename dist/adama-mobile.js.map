{"version":3,"sources":["app.js","app-config.js","auth/accessDenied.controller.js","auth/app.js","auth/recoverPassword.controller.js","auth/signin.controller.js","btn-signout/app.js","btn-signout/btn-signout.directive.js","datasources/binary-file-url.datasource.js","datasources/language.datasource.js","datasources/principal-identity.datasource.js","resources/user.resource.js","interceptors/auth-expired.interceptor.js","interceptors/auth.interceptor.js","services/adama-resource-config.service.js","services/adama-token.service.js","services/adama.constant.js","services/auth.service.js","services/binary-file.service.js","services/language.provider.js","services/loading.service.js","services/notifications.service.js","services/page-title.service.js","services/parse-links.service.js","services/principal.service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjhxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjfile":"adama-mobile.js","sourcesContent":["'use strict';\n\nangular.module('adama-mobile', [ //\n\t'ionic', //\n\t'ionic.service.core', //\n\t'ionic.service.auth', //\n\t'ionic.service.deploy', //\n\t'ionic.service.push', //\n\t'pascalprecht.translate', //\n\t'ngCookies', //\n\t'ngResource', //\n\t'LocalStorageModule', //\n\t'ngCordova', //\n\t'angular-jwt', //\n\t'angular-logger', //\n\t'ngMessages' //\n]);\n","/* globals StatusBar:false, cordova: false */\n\n'use strict';\n\nangular.module('adama-mobile').run([\"$ionicPlatform\", function($ionicPlatform) {\n\t$ionicPlatform.ready(function() {\n\t\tif (window.cordova && window.cordova.plugins.Keyboard) {\n\t\t\t// Hide the accessory bar by default (remove this to show the\n\t\t\t// accessory bar above the keyboard for form inputs)\n\t\t\tcordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n\n\t\t\t// Don't remove this line unless you know what you are doing. It\n\t\t\t// stops the viewport from snapping when text inputs are focused.\n\t\t\t// Ionic handles this internally for a much nicer keyboard\n\t\t\t// experience.\n\t\t\tcordova.plugins.Keyboard.disableScroll(true);\n\t\t}\n\t\tif (window.StatusBar) {\n\t\t\tStatusBar.styleDefault();\n\t\t}\n\t});\n}]);\n\nangular.module('adama-mobile').config([\"$urlRouterProvider\", function($urlRouterProvider) {\n\t// see https://github.com/angular-ui/ui-router/issues/600#issuecomment-47228922\n\t$urlRouterProvider.otherwise(function($injector) {\n\t\tvar $state = $injector.get('$state');\n\t\t$state.go('app.main');\n\t});\n}]);\n\nangular.module('adama-mobile').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.useSanitizeValueStrategy('escapeParameters');\n\n\t$translateProvider.useLocalStorage();\n\n\t$translateProvider.registerAvailableLanguageKeys(['en', 'fr'], {\n\t\t'en_*': 'en',\n\t\t'fr_*': 'fr'\n\t});\n\n\t$translateProvider.determinePreferredLanguage().fallbackLanguage('en');\n}]);\n\nangular.module('adama-mobile').config([\"$stateProvider\", \"adamaConstant\", function($stateProvider, adamaConstant) {\n\t$stateProvider.state('app', {\n\t\tabstract: true,\n\t\turl: '/app',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaMobileToolkitTemplateUrl.app;\n\t\t}\n\t});\n}]);\n\nangular.module('adama-mobile').run([\"$rootScope\", \"pageTitle\", function($rootScope, pageTitle) {\n\t$rootScope.$on('$stateChangeSuccess', function(event, toState) {\n\t\tif (toState && toState.data && toState.data.pageTitle) {\n\t\t\tpageTitle.set(toState.data.pageTitle);\n\t\t}\n\t});\n}]);\n\nangular.module('adama-mobile').config([\"$httpProvider\", function($httpProvider) {\n\t$httpProvider.interceptors.push('authExpiredInterceptor');\n\t$httpProvider.interceptors.push('authInterceptor');\n}]);\n\nangular.module('adama-mobile').run([\"$rootScope\", \"$state\", \"principalService\", function($rootScope, $state, principalService) {\n\t$rootScope.$on('$stateChangeStart', function(event, toState) {\n\t\tif (toState.data && toState.data.authorities && toState.data.authorities.length > 0) {\n\t\t\t// state needs at least one authority\n\t\t\tif (!principalService.isAuthenticated()) {\n\t\t\t\t// send user to the signin state so user can log in\n\t\t\t\t$state.go('auth.signin');\n\t\t\t} else {\n\t\t\t\tif (!principalService.hasAnyAuthority(toState.data.authorities)) {\n\t\t\t\t\t// user is signed in but not authorized for desired state\n\t\t\t\t\t$state.go('auth.accessDenied');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}]);\n\nangular.module('adama-mobile').run([\"$rootScope\", function($rootScope) {\n\t$rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n\t\tthrow error;\n\t});\n}]);\n\nangular.module('adama-mobile').run([\"$rootScope\", \"$injector\", \"adamaConstant\", function($rootScope, $injector, adamaConstant) {\n\tvar $ionicPlatform, $cordovaBadge;\n\tif (adamaConstant.enableBadge) {\n\t\t$ionicPlatform = $injector.get('$ionicPlatform');\n\t\t$cordovaBadge = $injector.get('$cordovaBadge');\n\t\t$ionicPlatform.on('resume', function() {\n\t\t\t$cordovaBadge.clear();\n\t\t});\n\n\t\t$ionicPlatform.ready(function() {\n\t\t\t$cordovaBadge.clear();\n\t\t});\n\t}\n}]);\n\nangular.module('adama-mobile').config([\"logEnhancerProvider\", function(logEnhancerProvider) {\n\tlogEnhancerProvider.prefixPattern = '%s::[%s]>';\n\tlogEnhancerProvider.datetimePattern = 'DD/MM/YYYY HH:mm:ss';\n\tlogEnhancerProvider.logLevels = {\n\t\t'*': logEnhancerProvider.LEVEL.OFF\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-mobile').controller('AccessDeniedCtrl', function() {\n\t// nothing to do\n});\n","'use strict';\n\nangular.module('adama-mobile').config([\"$stateProvider\", \"adamaConstant\", function($stateProvider, adamaConstant) {\n\t$stateProvider.state('auth', {\n\t\tabstract: true,\n\t\turl: '/auth',\n\t\ttemplate: '' + //\n\t\t\t'<ui-view></ui-view>' + //\n\t\t\t''\n\t});\n\n\t$stateProvider.state('auth.signin', {\n\t\turl: '/',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaMobileToolkitTemplateUrl.authSignin;\n\t\t},\n\t\tcontroller: 'SigninCtrl',\n\t\tcontrollerAs: '$ctrl',\n\t\tdata: {\n\t\t\tpageTitle: 'SIGNIN',\n\t\t\tauthorities: []\n\t\t}\n\t});\n\n\t$stateProvider.state('auth.recoverPassword', {\n\t\turl: '/recoverPassword',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaMobileToolkitTemplateUrl.authRecover;\n\t\t},\n\t\tcontroller: 'RecoverPasswordCtrl',\n\t\tcontrollerAs: '$ctrl',\n\t\tdata: {\n\t\t\tpageTitle: 'RECOVER',\n\t\t\tauthorities: []\n\t\t}\n\t});\n\n\t$stateProvider.state('auth.accessDenied', {\n\t\turl: '/accessDenied',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaMobileToolkitTemplateUrl.authAccessDenied;\n\t\t},\n\t\tcontroller: 'AccessDeniedCtrl',\n\t\tcontrollerAs: '$ctrl',\n\t\tdata: {\n\t\t\tpageTitle: 'ACCESS_DENIED',\n\t\t\tauthorities: []\n\t\t}\n\t});\n}]);\n\nangular.module('adama-mobile').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.translations('fr', {\n\t\t'SIGNIN': 'Identification',\n\t\t'SIGNIN_INTRO': 'Identifiez-vous pour démarrer votre session',\n\t\t'SIGNIN_FORGET_PASSWORD': 'J\\'ai oublié mon mot de passe ...',\n\t\t'SIGNIN_USERNAME': 'Identifiant',\n\t\t'SIGNIN_USERNAME_REQUIRED': 'L\\'identifiant est obligatoire',\n\t\t'SIGNIN_PASSWORD': 'Mot de passe',\n\t\t'SIGNIN_PASSWORD_REQUIRED': 'Le mot de passe est obligatoire',\n\t\t'SIGNIN_SUBMIT': 'Démarrer la session',\n\t\t'SIGNIN_LOADING': 'Données en cours de chargement',\n\t\t'SIGNIN_ERROR_TITLE': 'Erreur d\\'authentification',\n\t\t'SIGNIN_ERROR_MESSAGE': 'Identifiant ou mot de passe incorrect.',\n\t\t'RECOVER': 'Récupération de mot de passe',\n\t\t'RECOVER_INTRO': 'Saisissez votre email pour récupérer votre mot de passe',\n\t\t'RECOVER_MAIL': 'Email',\n\t\t'RECOVER_MAIL_REQUIRED': 'L\\'email est obligatoire',\n\t\t'RECOVER_MAIL_EMAIL': 'L\\'email n\\'est pas au bon format',\n\t\t'RECOVER_SUBMIT': 'Récupérer mon mot de passe',\n\t\t'RECOVER_BACK_TO_LOGIN': 'Retour à l\\'identificaition',\n\t\t'RECOVER_SUCCESS': 'Consultez votre email pour connaître comment réinitialiser votre mot de passe.',\n\t\t'RECOVER_ERROR_TITLE': 'Erreur',\n\t\t'RECOVER_ERROR_GENERIC': 'Erreur lors de la récupération du mot de passe.',\n\t\t'RECOVER_ERROR_EMAIL_NOT_EXIST': 'L\\'email n\\'existe pas',\n\t\t'ACCESS_DENIED_BACK_TO_HOME': 'Retour à l\\'accueil',\n\t\t'ACCESS_DENIED': 'Accès interdit',\n\t\t'ACCESS_DENIED_INTRO': 'Vous n\\'avez pas suffisamment de droits d\\'accéder à cette page.'\n\t});\n\n\t$translateProvider.translations('en', {\n\t\t'SIGNIN': 'Signin',\n\t\t'SIGNIN_INTRO': 'Sign in to start your session',\n\t\t'SIGNIN_FORGET_PASSWORD': 'I forgot my password ...',\n\t\t'SIGNIN_USERNAME': 'Username',\n\t\t'SIGNIN_USERNAME_REQUIRED': 'Username is required',\n\t\t'SIGNIN_PASSWORD': 'Password',\n\t\t'SIGNIN_PASSWORD_REQUIRED': 'Password is required',\n\t\t'SIGNIN_SUBMIT': 'Start session',\n\t\t'SIGNIN_LOADING': 'Loading user informations',\n\t\t'SIGNIN_ERROR_TITLE': 'Authentication error',\n\t\t'SIGNIN_ERROR_MESSAGE': 'Username or password are incorrect.',\n\t\t'RECOVER': 'Recover password',\n\t\t'RECOVER_INTRO': 'Set your email to recover your password',\n\t\t'RECOVER_MAIL': 'Email',\n\t\t'RECOVER_MAIL_REQUIRED': 'Email is required',\n\t\t'RECOVER_MAIL_EMAIL': 'Email does not respect the right format',\n\t\t'RECOVER_SUBMIT': 'Retrieve my password',\n\t\t'RECOVER_BACK_TO_LOGIN': 'Back to signin',\n\t\t'RECOVER_SUCCESS': 'Check your e-mails for details on how to reset your password.',\n\t\t'RECOVER_ERROR_TITLE': 'Error',\n\t\t'RECOVER_ERROR_GENERIC': 'Recovering error.',\n\t\t'RECOVER_ERROR_EMAIL_NOT_EXIST': 'E-Mail address isn\\'t registered! Please check and try again',\n\t\t'ACCESS_DENIED_BACK_TO_HOME': 'Back to home',\n\t\t'ACCESS_DENIED': 'Access denied',\n\t\t'ACCESS_DENIED_INTRO': 'You do not have enough privileges to access this page.'\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-mobile').controller('RecoverPasswordCtrl', [\"$filter\", \"$ionicPopup\", \"principalService\", function($filter, $ionicPopup, principalService) {\n\tvar ctrl = this;\n\tctrl.recover = function(userEmail) {\n\t\tctrl.recoverSuccess = false;\n\t\tctrl.recoverError = false;\n\t\tctrl.errorEmailNotExists = false;\n\t\tctrl.loading = true;\n\t\tprincipalService.resetPasswordInit(userEmail).then(function() {\n\t\t\tctrl.recoverSuccess = true;\n\t\t}).catch(function(response) {\n\t\t\tvar messageKey = 'RECOVER_ERROR_GENERIC';\n\t\t\tif (response.status === 400 && response.data === 'e-mail address not registered') {\n\t\t\t\tmessageKey = 'RECOVER_ERROR_EMAIL_NOT_EXIST';\n\t\t\t}\n\t\t\tvar translateFn = $filter('translate');\n\t\t\t$ionicPopup.alert({\n\t\t\t\ttitle: translateFn('RECOVER_ERROR_TITLE'),\n\t\t\t\ttemplate: translateFn(messageKey)\n\t\t\t});\n\t\t}).finally(function() {\n\t\t\tctrl.loading = false;\n\t\t});\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-mobile').controller('SigninCtrl', [\"$rootScope\", \"$state\", \"$log\", \"authService\", \"$filter\", \"$ionicPopup\", function($rootScope, $state, $log, authService, $filter, $ionicPopup) {\n\tvar log = $log.getInstance('adama-mobile.auth.signin');\n\tvar ctrl = this;\n\tctrl.loading = false;\n\tctrl.signin = function(userName, userPassword) {\n\t\tctrl.loading = true;\n\t\tauthService.login(userName, userPassword).then(function() {\n\t\t\tlog.debug('user is logged, rediret to app.main');\n\t\t\t$state.go('app.main');\n\t\t\tctrl.loading = false;\n\t\t}).catch(function(rejection) {\n\t\t\tlog.info('error while signing in', rejection);\n\t\t\tctrl.rejection = rejection;\n\t\t\tvar translateFn = $filter('translate');\n\t\t\t$ionicPopup.alert({\n\t\t\t\ttitle: translateFn('SIGNIN_ERROR_TITLE'),\n\t\t\t\ttemplate: translateFn('SIGNIN_ERROR_MESSAGE')\n\t\t\t});\n\t\t\tctrl.loading = false;\n\t\t});\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-mobile').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.translations('fr', {\n\t\t'BTN_SIGNOUT': 'Déconnexion'\n\t});\n\n\t$translateProvider.translations('en', {\n\t\t'BTN_SIGNOUT': 'Sign out'\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-mobile').component('btnSignout', {\n\ttemplateUrl: 'adama-mobile/btn-signout/btn-signout.html',\n\tbindings: {\n\t\tadditionalClass: '@'\n\t},\n\tcontroller: [\"authService\", \"$state\", function(authService, $state) {\n\t\tvar ctrl = this;\n\t\tctrl.signout = function() {\n\t\t\tauthService.logout();\n\t\t\t$state.go('auth.signin');\n\t\t};\n\t}]\n});\n","'use strict';\n\nangular.module('adama-mobile').directive('dsBinaryFileUrl', [\"$parse\", \"binaryFileService\", function($parse, binaryFileService) {\n\treturn {\n\t\tscope: false,\n\t\tlink: function(scope, element, attrs) {\n\t\t\tvar updateOutput = function(binaryFileList) {\n\t\t\t\tif (attrs.output) {\n\t\t\t\t\tbinaryFileList = angular.copy(binaryFileList);\n\t\t\t\t}\n\t\t\t\tif (!angular.isArray(binaryFileList)) {\n\t\t\t\t\tbinaryFileList = [binaryFileList];\n\t\t\t\t}\n\t\t\t\tbinaryFileService.initUrlForBinaryFiles(binaryFileList).then(function() {\n\t\t\t\t\tif (attrs.output) {\n\t\t\t\t\t\t$parse(attrs.output).assign(scope, binaryFileList);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t\tscope.$watch(attrs.input, function() {\n\t\t\t\tvar binaryFileList = $parse(attrs.input)(scope);\n\t\t\t\tif (binaryFileList) {\n\t\t\t\t\tupdateOutput(binaryFileList);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-mobile').directive('dsLanguage', [\"$parse\", \"language\", function($parse, language) {\n\treturn {\n\t\tscope: false,\n\t\tlink: function(scope, element, attrs) {\n\t\t\tlanguage.getAll().then(function(languages) {\n\t\t\t\t$parse(attrs.data).assign(scope, languages);\n\t\t\t});\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-mobile').directive('dsPrincipalIdentity', [\"$rootScope\", \"$parse\", \"principalService\", function($rootScope, $parse, principalService) {\n\treturn {\n\t\tscope: false,\n\t\tlink: function(scope, element, attrs) {\n\t\t\t$rootScope.$on('principal-new', function(event, data) {\n\t\t\t\t$parse(attrs.data).assign(scope, data.principal);\n\t\t\t});\n\t\t\t$rootScope.$on('principal-remove', function() {\n\t\t\t\t$parse(attrs.data).assign(scope, undefined);\n\t\t\t});\n\t\t\tprincipalService.getPrincipal().then(function(principal) {\n\t\t\t\t$parse(attrs.data).assign(scope, principal);\n\t\t\t});\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-mobile').factory('User', [\"$resource\", \"adamaConstant\", \"adamaResourceConfig\", function($resource, adamaConstant, adamaResourceConfig) {\n\tvar config = angular.extend({}, adamaResourceConfig, {\n\t\t'delete': {\n\t\t\tmethod: 'DELETE',\n\t\t\tparams: {\n\t\t\t\tid: '@id'\n\t\t\t}\n\t\t}\n\t});\n\treturn $resource(adamaConstant.apiBase + 'users/:id', {}, config);\n}]);\n","/*jshint -W069 */\n/*jscs:disable requireDotNotation*/\n'use strict';\n\nangular.module('adama-mobile').factory('authExpiredInterceptor', [\"$injector\", \"$q\", \"$log\", \"adamaConstant\", function($injector, $q, $log, adamaConstant) {\n\tvar getHttpService = (function() {\n\t\tvar service;\n\t\treturn function() {\n\t\t\treturn service || (service = $injector.get('$http'));\n\t\t};\n\t}());\n\n\tvar getAdamaTokenService = (function() {\n\t\tvar service;\n\t\treturn function() {\n\t\t\treturn service || (service = $injector.get('adamaTokenService'));\n\t\t};\n\t}());\n\n\tvar getStateService = (function() {\n\t\tvar service;\n\t\treturn function() {\n\t\t\treturn service || (service = $injector.get('$state'));\n\t\t};\n\t}());\n\n\treturn {\n\t\tresponseError: function(response) {\n\t\t\tvar config = response.config;\n\t\t\tif (response.status === 401 && config.url.indexOf(adamaConstant.apiBase) === 0) {\n\t\t\t\tvar log = $log.getInstance('adama-mobile.interceptors.authExpiredInterceptor');\n\t\t\t\tlog.debug('error 401, refresh token', config.url);\n\t\t\t\treturn getAdamaTokenService().refreshAndGetToken().then(function() {\n\t\t\t\t\tlog.debug('token is refresh, reset Authorization header');\n\t\t\t\t\tconfig.headers['Authorization'] = undefined;\n\t\t\t\t\treturn getHttpService()(config);\n\t\t\t\t}, function(rejection) {\n\t\t\t\t\treturn getStateService().go('auth.signin').then(function() {\n\t\t\t\t\t\tlog.debug('error while getting user token', rejection);\n\t\t\t\t\t\treturn $q.reject(rejection);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn $q.reject(response);\n\t\t}\n\t};\n}]);\n","/*jshint -W069 */\n/*jscs:disable requireDotNotation*/\n'use strict';\n\nangular.module('adama-mobile').factory('authInterceptor', [\"$injector\", \"$q\", \"$log\", \"adamaConstant\", function($injector, $q, $log, adamaConstant) {\n\tvar getAdamaTokenService = (function() {\n\t\tvar service;\n\t\treturn function() {\n\t\t\treturn service || (service = $injector.get('adamaTokenService'));\n\t\t};\n\t}());\n\n\tvar getStateService = (function() {\n\t\tvar service;\n\t\treturn function() {\n\t\t\treturn service || (service = $injector.get('$state'));\n\t\t};\n\t}());\n\n\treturn {\n\t\t// Add authorization token to headers\n\t\trequest: function(config) {\n\t\t\tvar log = $log.getInstance('adama-mobile.interceptors.authInterceptor');\n\t\t\tlog.debug('url', config.url);\n\t\t\tconfig.headers = config.headers || {};\n\t\t\tif (!config.headers['Authorization'] && config.url.indexOf(adamaConstant.apiBase) === 0) {\n\t\t\t\tlog.debug('need authorization, getting token');\n\t\t\t\treturn getAdamaTokenService().getToken().then(function(token) {\n\t\t\t\t\tlog.debug('adding Authorization header', token);\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tconfig.headers['Authorization'] = 'Bearer ' + token;\n\t\t\t\t\t}\n\t\t\t\t\treturn config;\n\t\t\t\t}, function(rejection) {\n\t\t\t\t\treturn getStateService().go('auth.signin').then(function() {\n\t\t\t\t\t\tlog.debug('error while getting user token', rejection);\n\t\t\t\t\t\treturn $q.reject(rejection);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn config;\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-mobile').factory('adamaResourceConfig', [\"ParseLinks\", function(ParseLinks) {\n\treturn {\n\t\t'query': {\n\t\t\tmethod: 'GET',\n\t\t\tisArray: true,\n\t\t\ttransformResponse: function(data, headers, status) {\n\t\t\t\tdata = angular.fromJson(data);\n\t\t\t\tif (status === 200) {\n\t\t\t\t\tdata.$metadata = {\n\t\t\t\t\t\tlinks: ParseLinks.parse(headers('link')),\n\t\t\t\t\t\ttotalItems: headers('X-Total-Count')\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tinterceptor: {\n\t\t\t\tresponse: function(response) {\n\t\t\t\t\tresponse.resource.$metadata = response.data.$metadata;\n\t\t\t\t\treturn response.resource;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'get': {\n\t\t\tmethod: 'GET'\n\t\t},\n\t\t'save': {\n\t\t\tmethod: 'POST'\n\t\t},\n\t\t'update': {\n\t\t\tmethod: 'PUT'\n\t\t},\n\t\t'delete': {\n\t\t\tmethod: 'DELETE',\n\t\t\tparams: {\n\t\t\t\tid: '@id'\n\t\t\t}\n\t\t}\n\t};\n}]);\n","/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n/* jshint camelcase:false */\n\n'use strict';\n\nangular.module('adama-mobile').factory('adamaTokenService', [\"$rootScope\", \"$http\", \"$q\", \"$state\", \"localStorageService\", \"$log\", \"jwtHelper\", \"adamaConstant\", function($rootScope, $http, $q, $state, localStorageService, $log, jwtHelper, adamaConstant) {\n\tvar log = $log.getInstance('adama-mobile.services.adamaTokenService');\n\tvar api = {};\n\n\tapi.getToken = function() {\n\t\tlog.debug('getToken');\n\t\tvar token = localStorageService.get('access_token');\n\t\tif (token) {\n\t\t\tlog.debug('adamaTokenService.getToken user is authenticated');\n\t\t\tif (token && jwtHelper.isTokenExpired(token)) {\n\t\t\t\tlog.debug('adamaTokenService.getToken token is expired');\n\t\t\t\treturn api.refreshAndGetToken();\n\t\t\t}\n\t\t}\n\t\treturn $q.when(token);\n\t};\n\n\tapi.refreshAndGetToken = function() {\n\t\tlog.debug('adamaTokenService.refreshAndGetToken');\n\t\tvar token = localStorageService.get('access_token');\n\t\tif (!token) {\n\t\t\tlog.info('no token, redirect to signin');\n\t\t\treturn $q.reject('refreshAndGetToken : no token !!!!');\n\t\t}\n\t\tlog.debug('adamaTokenService.refreshAndGetToken token', token);\n\t\tvar refreshToken = localStorageService.get('refresh_token');\n\t\tlog.debug('adamaTokenService.refreshAndGetToken refreshToken', refreshToken);\n\t\treturn $http({\n\t\t\tmethod: 'POST',\n\t\t\turl: adamaConstant.apiBase + 'login/refresh',\n\t\t\theaders: {\n\t\t\t\t'Authorization': 'Bearer ' + token\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\t'refresh_token': refreshToken\n\t\t\t}\n\t\t}).then(function(response) {\n\t\t\tvar newToken = response.data.access_token;\n\t\t\tlog.debug('adamaTokenService.refreshAndGetToken newToken', newToken);\n\t\t\tlocalStorageService.set('access_token', newToken);\n\t\t\treturn newToken;\n\t\t}, function(rejection) {\n\t\t\tlog.info('error while refreshing user token, redirect to signin', rejection);\n\t\t\treturn $q.reject(rejection);\n\t\t});\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-mobile').constant('adamaConstant', {\n\tapiBase: 'http://localhost:13337/',\n\tadamaMobileToolkitTemplateUrl: {\n\t\tapp: 'adama-mobile/app.html',\n\t\tauthAccessDenied: 'adama-mobile/auth/accessDenied.html',\n\t\tauthSignin: 'adama-mobile/auth/signin.html',\n\t\tauthRecover: 'adama-mobile/auth/recoverPassword.html'\n\t},\n\tenableBadge: false,\n\tenablePush: false,\n\turlResetPassword: 'path/to/reset/password?origin=mobile'\n});\n","/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n/* jshint camelcase:false */\n\n'use strict';\n\nangular.module('adama-mobile').factory('authService', [\"$rootScope\", \"$http\", \"localStorageService\", \"$log\", \"adamaConstant\", \"principalService\", function($rootScope, $http, localStorageService, $log, adamaConstant, principalService) {\n\tvar log = $log.getInstance('adama-mobile.services.authService');\n\tvar api = {};\n\n\tapi.login = function(username, password) {\n\t\tlog.debug('login', username);\n\t\tvar data = {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t};\n\n\t\treturn $http({\n\t\t\tmethod: 'POST',\n\t\t\turl: adamaConstant.apiBase + 'login/authenticate',\n\t\t\tdata: data\n\t\t}).then(function(response) {\n\t\t\tlog.debug('User is authenticated');\n\t\t\tlocalStorageService.set('access_token', response.data.access_token);\n\t\t\tlocalStorageService.set('refresh_token', response.data.refresh_token);\n\t\t\tlocalStorageService.set('external_id', username);\n\t\t});\n\t};\n\n\tapi.logout = function() {\n\t\tlog.debug('logout');\n\t\tlocalStorageService.set('access_token', undefined);\n\t\tlocalStorageService.set('refresh_token', undefined);\n\t\tlocalStorageService.set('external_id', undefined);\n\t\tprincipalService.deletePrincipal();\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-mobile').factory('binaryFileService', [\"$http\", \"$q\", \"adamaConstant\", function($http, $q, adamaConstant) {\n\tvar api = {};\n\n\tapi.initUrlForBinaryFiles = function(binaryFileList) {\n\t\tvar workingList = [];\n\t\tvar idList = [];\n\t\tangular.forEach(binaryFileList, function(binaryFile) {\n\t\t\tif (binaryFile && binaryFile.id && !binaryFile.url) {\n\t\t\t\tworkingList.push(binaryFile);\n\t\t\t\tidList.push(binaryFile.id);\n\t\t\t}\n\t\t});\n\t\tif (idList.length) {\n\t\t\treturn $http({\n\t\t\t\tmethod: 'PUT',\n\t\t\t\turl: adamaConstant.apiBase + 'files',\n\t\t\t\tdata: angular.toJson(idList)\n\t\t\t}).then(function(response) {\n\t\t\t\tangular.forEach(workingList, function(binaryFile) {\n\t\t\t\t\tbinaryFile.url = response.data.urlList[binaryFile.id];\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn $q.when();\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-mobile').provider('language', function() {\n\tvar languages = ['en', 'fr'];\n\tvar selectorData = [{\n\t\tcode: 'en',\n\t\tlabelKey: 'FLAG_EN',\n\t\tcssCLass: 'us'\n\t}, {\n\t\tcode: 'fr',\n\t\tlabelKey: 'FLAG_FR',\n\t\tcssCLass: 'fr'\n\t}];\n\n\tthis.setLanguages = function(newLanguages) {\n\t\tlanguages = newLanguages;\n\t};\n\n\tthis.setSelectorData = function(newSelectorData) {\n\t\tselectorData = newSelectorData;\n\t};\n\n\tthis.$get = [\"$q\", \"$http\", \"$translate\", function($q, $http, $translate) {\n\t\tvar api = {};\n\n\t\tapi.getCurrent = function() {\n\t\t\tvar language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\t\t\tif (angular.isUndefined(language)) {\n\t\t\t\tlanguage = 'en';\n\t\t\t}\n\t\t\treturn $q.when(language);\n\t\t};\n\n\t\tapi.getAll = function() {\n\t\t\treturn $q.when(languages);\n\t\t};\n\n\t\tapi.getSelectorData = function() {\n\t\t\treturn $q.when(selectorData);\n\t\t};\n\n\t\treturn api;\n\t}];\n});\n","'use strict';\n\nangular.module('adama-mobile').factory('loadingService', [\"$filter\", \"$ionicLoading\", function($filter, $ionicLoading) {\n\tvar api = {};\n\tvar translateFn = $filter('translate');\n\n\tapi.blockUiWhileResolving = function(messageKey, promise) {\n\t\tif (promise.$$state.status === 0) {\n\t\t\t$ionicLoading.show({\n\t\t\t\ttemplate: translateFn(messageKey)\n\t\t\t});\n\t\t}\n\t\treturn promise.finally(function() {\n\t\t\t$ionicLoading.hide();\n\t\t});\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-mobile').factory('notificationsService', [\"$filter\", \"$cordovaToast\", \"$log\", function($filter, $cordovaToast, $log) {\n\tvar log = $log.getInstance('adama-mobile.services.notificationsService');\n\tvar api = {};\n\tvar translateFn = $filter('translate');\n\n\tapi.show = function(messageKey) {\n\t\tlog.debug('show', messageKey);\n\t\treturn $cordovaToast.show(translateFn(messageKey), 'short', 'bottom');\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-mobile').factory('pageTitle', [\"$rootScope\", \"$filter\", function($rootScope, $filter) {\n\tvar translateFn = $filter('translate');\n\tvar api = {};\n\n\tapi.set = function(pageTitleKey, data) {\n\t\tvar newTitle = translateFn(pageTitleKey, data);\n\t\t$rootScope.pageTitle = newTitle;\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-mobile').service('ParseLinks', function() {\n\tthis.parse = function(header) {\n\t\tif (header.length === 0) {\n\t\t\tthrow new Error('input must not be of zero length');\n\t\t}\n\n\t\t// Split parts by comma\n\t\tvar parts = header.split(',');\n\t\tvar links = {};\n\t\t// Parse each part into a named link\n\t\tangular.forEach(parts, function(p) {\n\t\t\tvar section = p.split(';');\n\t\t\tif (section.length !== 2) {\n\t\t\t\tthrow new Error('section could not be split on \";\"');\n\t\t\t}\n\t\t\tvar url = section[0].replace(/<(.*)>/, '$1').trim();\n\t\t\tvar queryString = {};\n\t\t\turl.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), function($0, $1, $2, $3) {\n\t\t\t\tqueryString[$1] = $3;\n\t\t\t});\n\t\t\tvar page = queryString.page;\n\t\t\tif (angular.isString(page)) {\n\t\t\t\tpage = parseInt(page);\n\t\t\t}\n\t\t\tvar name = section[1].replace(/rel='(.*)'/, '$1').trim();\n\t\t\tlinks[name] = page;\n\t\t});\n\n\t\treturn links;\n\t};\n});\n","/*jshint -W069 */\n/*jscs:disable requireDotNotation*/\n'use strict';\n\nangular.module('adama-mobile').factory('principalService', [\"$rootScope\", \"$q\", \"$http\", \"$resource\", \"$state\", \"localStorageService\", \"$log\", \"adamaConstant\", function($rootScope, $q, $http, $resource, $state, localStorageService, $log, adamaConstant) {\n\tvar log = $log.getInstance('adama-mobile.services.principalService');\n\tvar api = {};\n\tvar principalPromise;\n\tvar isAuthenticated = localStorageService.get('access_token') ? true : false;\n\tvar accountResource = $resource(adamaConstant.apiBase + 'account', {}, {});\n\tvar passwordResource = $resource(adamaConstant.apiBase + 'account/change_password', {}, {});\n\tvar passwordResetInitResource = $resource(adamaConstant.apiBase + 'account/reset_password/init', {}, {});\n\n\tapi.isAuthenticated = function() {\n\t\treturn isAuthenticated;\n\t};\n\n\tapi.resetPrincipal = function() {\n\t\tvar result;\n\t\tisAuthenticated = localStorageService.get('access_token') ? true : false;\n\t\tlog.debug('resetPrincipal');\n\t\tlog.debug('resetPrincipal isAuthenticated', isAuthenticated);\n\t\tif (isAuthenticated) {\n\t\t\tvar externalId = localStorageService.get('external_id');\n\t\t\tif (!externalId) {\n\t\t\t\tlog.info('no external_id, redirect to signin');\n\t\t\t\tresult = $q.reject('resetPrincipal : no external_id');\n\t\t\t} else {\n\t\t\t\tprincipalPromise = $http({\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\turl: adamaConstant.apiBase + 'users/byLogin/' + externalId\n\t\t\t\t}).then(function(response) {\n\t\t\t\t\tvar principal = response.data;\n\t\t\t\t\tisAuthenticated = true;\n\t\t\t\t\t$rootScope.$broadcast('principal-new', {\n\t\t\t\t\t\tprincipal: principal\n\t\t\t\t\t});\n\t\t\t\t\treturn principal;\n\t\t\t\t});\n\t\t\t\tresult = principalPromise;\n\t\t\t}\n\t\t} else {\n\t\t\tlog.info('user is not authenticated');\n\t\t\tresult = $q.reject('resetPrincipal : not authenticated');\n\t\t}\n\t\treturn result.catch(function(rejection) {\n\t\t\tlog.debug('there was a problem while reseting user info, redirect to signin');\n\t\t\tisAuthenticated = false;\n\t\t\tprincipalPromise = undefined;\n\t\t\t$state.go('auth.signin');\n\t\t\treturn $q.reject(rejection);\n\t\t});\n\t};\n\n\tapi.getPrincipal = function() {\n\t\tif (!principalPromise) {\n\t\t\treturn api.resetPrincipal();\n\t\t}\n\t\treturn principalPromise;\n\t};\n\n\tapi.deletePrincipal = function() {\n\t\tisAuthenticated = false;\n\t\tprincipalPromise = undefined;\n\t\t$rootScope.$broadcast('principal-remove');\n\t};\n\n\tapi.hasAnyAuthority = function(authorities) {\n\t\tlog.debug('hasAnyAuthority', authorities);\n\t\t// TODO\n\t\treturn true;\n\t};\n\n\tapi.resetPasswordInit = function(mail) {\n\t\tlog.debug('resetPasswordInit', mail);\n\t\treturn passwordResetInitResource.save({\n\t\t\tmail: mail,\n\t\t\turlResetPassword: adamaConstant.urlResetPassword\n\t\t}).$promise;\n\t};\n\n\tapi.updateAccount = function(principal) {\n\t\tlog.debug('updateAccount', principal);\n\t\treturn accountResource.save(principal, function() {\n\t\t\t$rootScope.$emit('principal-update', {\n\t\t\t\tprincipal: principal\n\t\t\t});\n\t\t\tprincipalPromise = $q.when(principal);\n\t\t}).$promise;\n\t};\n\n\tapi.changePassword = function(newPassword) {\n\t\tlog.debug('changePassword');\n\t\treturn passwordResource.save({\n\t\t\tpassword: newPassword\n\t\t}).$promise;\n\t};\n\n\treturn api;\n}]);\n"],"sourceRoot":"/source/"}